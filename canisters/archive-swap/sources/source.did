type Account = record { owner : principal; subaccount : opt blob };
type Amm = variant { "swap_v2_1%"; "swap_v2_0.05%"; "swap_v2_0.3%" };
type CanisterStatusResponse = record {
  status : CanisterStatusType;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettings;
  query_stats : QueryStats;
  idle_cycles_burned_per_day : nat;
  module_hash : opt blob;
  reserved_cycles : nat;
};
type CanisterStatusType = variant { stopped; stopping; running };
type CustomHttpRequest = record {
  url : text;
  method : text;
  body : blob;
  headers : vec record { text; text };
};
type CustomHttpResponse = record {
  body : blob;
  headers : vec record { text; text };
  upgrade : opt bool;
  streaming_strategy : opt StreamingStrategy;
  status_code : nat16;
};
type DefiniteCanisterSettings = record {
  freezing_threshold : nat;
  controllers : vec principal;
  reserved_cycles_limit : nat;
  log_visibility : LogVisibility;
  wasm_memory_limit : nat;
  memory_allocation : nat;
  compute_allocation : nat;
};
type ExampleVec = record { vec_data : nat64 };
type GetBlocksArgs = record { start : nat64; length : nat64 };
type GetBlocksError = variant {
  BadFirstBlockIndex : record {
    requested_index : nat64;
    first_valid_index : nat64;
  };
  Other : record { error_message : text; error_code : nat64 };
};
type GetEncodedBlocksResult = variant { Ok : vec blob; Err : GetBlocksError };
type GetSwapBlocksResult = variant {
  Ok : SwapBlockRange;
  Err : GetBlocksError;
};
type InitArg = record { maintainers : opt vec principal; schedule : opt nat };
type InitArgV1 = record {
  maintainers : opt vec principal;
  block_offset : opt record { nat64; blob };
  core_canister_id : opt principal;
  max_memory_size_bytes : opt nat64;
  schedule : opt nat;
};
type InitArgs = variant { V0 : InitArg; V1 : InitArgV1 };
type LogVisibility = variant {
  controllers;
  public;
  allowed_viewers : vec principal;
};
type MigratedRecords = record {
  records : vec Record;
  next_id : nat64;
  removed : nat64;
};
type PageData = record {
  total : nat64;
  data : vec Record;
  page : nat64;
  size : nat32;
};
type PairCreate = record { pa : TokenPairAmm; creator : principal };
type PairCumulativePrice = record {
  pa : TokenPairAmm;
  price_cumulative_exponent : nat8;
  price0_cumulative : nat;
  block_timestamp : nat64;
  price1_cumulative : nat;
};
type PairOperation = variant {
  swap : PairSwapToken;
  swap_v2 : SwapV2Operation;
  create : PairCreate;
};
type PairSwapToken = record {
  to : Account;
  amm : Amm;
  token_a : principal;
  token_b : principal;
  from : Account;
  amount_a : nat;
  amount_b : nat;
};
type PauseReason = record { timestamp_nanos : int; message : text };
type Permission = variant { Permitted : text; Forbidden : text };
type PermissionUpdatedArg = variant {
  UpdateRolePermission : record { text; opt vec text };
  UpdateUserPermission : record { principal; opt vec text };
  UpdateUserRole : record { principal; opt vec text };
};
type QueryPage = record { page : nat64; size : nat32 };
type QueryStats = record {
  response_payload_bytes_total : nat;
  num_instructions_total : nat;
  num_calls_total : nat;
  request_payload_bytes_total : nat;
};
type Record = record {
  id : nat64;
  created : int;
  topic : nat8;
  content : text;
  done : opt record { int; text };
  caller : principal;
};
type RecordSearchArg = record {
  id : opt record { opt nat64; opt nat64 };
  created : opt record { opt nat64; opt nat64 };
  topic : opt vec text;
  content : opt text;
  caller : opt vec principal;
};
type StreamingCallbackHttpResponse = record {
  token : opt StreamingCallbackToken;
  body : blob;
};
type StreamingCallbackToken = record {
  token : vec record { text; text };
  path : text;
};
type StreamingStrategy = variant {
  Callback : record {
    token : StreamingCallbackToken;
    callback : func (StreamingCallbackToken) -> (
        StreamingCallbackHttpResponse,
      ) query;
  };
};
type SwapBlock = record {
  transaction : SwapTransaction;
  timestamp : nat64;
  parent_hash : blob;
};
type SwapBlockRange = record { blocks : vec SwapBlock };
type SwapOperation = variant { pair : PairOperation };
type SwapTransaction = record {
  created : opt nat64;
  memo : opt blob;
  operation : SwapOperation;
};
type SwapV2BurnToken = record {
  pa : TokenPairAmm;
  to : Account;
  token : principal;
  from : Account;
  amount0 : nat;
  amount1 : nat;
  token0 : principal;
  token1 : principal;
  amount : nat;
};
type SwapV2MintFeeToken = record {
  pa : TokenPairAmm;
  to : Account;
  token : principal;
  amount : nat;
};
type SwapV2Operation = variant {
  burn : SwapV2BurnToken;
  mint : SwapV2BurnToken;
  mint_fee : SwapV2MintFeeToken;
  cumulative_price : PairCumulativePrice;
};
type TokenPair = record { token0 : principal; token1 : principal };
type TokenPairAmm = record { amm : Amm; pair : TokenPair };
service : (opt InitArgs) -> {
  __get_candid_interface_tmp_hack : () -> (text) query;
  append_blocks : (vec blob) -> ();
  business_example_cell_query : () -> (text) query;
  business_example_cell_set : (text) -> ();
  business_example_log_query : () -> (vec text) query;
  business_example_log_update : (text) -> (nat64);
  business_example_map_query : () -> (vec record { nat64; text }) query;
  business_example_map_update : (nat64, opt text) -> (opt text);
  business_example_priority_queue_pop : () -> (opt nat64);
  business_example_priority_queue_push : (nat64) -> ();
  business_example_priority_queue_query : () -> (vec nat64) query;
  business_example_query : () -> (text) query;
  business_example_set : (text) -> ();
  business_example_vec_pop : () -> (opt ExampleVec);
  business_example_vec_push : (nat64) -> ();
  business_example_vec_query : () -> (vec ExampleVec) query;
  canister_status : () -> (CanisterStatusResponse);
  get_block_pb : (blob) -> (blob) query;
  get_blocks : (GetBlocksArgs) -> (GetSwapBlocksResult) query;
  get_blocks_pb : (blob) -> (blob) query;
  get_encoded_blocks : (GetBlocksArgs) -> (GetEncodedBlocksResult) query;
  http_request : (CustomHttpRequest) -> (CustomHttpResponse) query;
  iter_blocks_pb : (blob) -> (blob) query;
  pause_query : () -> (bool) query;
  pause_query_reason : () -> (opt PauseReason) query;
  pause_replace : (opt text) -> ();
  permission_all : () -> (vec Permission) query;
  permission_assigned_by_user : (principal) -> (opt vec Permission) query;
  permission_assigned_query : () -> (opt vec Permission) query;
  permission_find_by_user : (principal) -> (vec text) query;
  permission_query : () -> (vec text) query;
  permission_roles_all : () -> (vec record { text; vec Permission }) query;
  permission_roles_by_user : (principal) -> (opt vec text) query;
  permission_roles_query : () -> (opt vec text) query;
  permission_update : (vec PermissionUpdatedArg) -> ();
  record_find_by_page : (QueryPage, opt RecordSearchArg) -> (PageData) query;
  record_migrate : (nat32) -> (MigratedRecords);
  record_topics : () -> (vec text) query;
  remaining_capacity : () -> (nat64) query;
  schedule_find : () -> (opt nat64) query;
  schedule_replace : (opt nat64) -> ();
  schedule_trigger : () -> ();
  version : () -> (nat32) query;
  wallet_balance : () -> (nat) query;
  wallet_receive : () -> (nat);
  whoami : () -> (principal) query;
}