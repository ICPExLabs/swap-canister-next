type Account = record { owner : principal; subaccount : opt blob };
type Amm = variant {
  "swap_v2_1%";
  "swap_v2_0.01%";
  "swap_v2_0.05%";
  "swap_v2_0.3%";
};
type ArchivedBlocks = record {
  canister_id : principal;
  length : nat64;
  block_height_offset : nat64;
};
type BlockChainArgs = variant {
  BlockQuery : nat64;
  WasmModuleQuery;
  CurrentArchivingMaxLengthUpdate : nat64;
  ArchivedCanisterMaxMemorySizeBytesUpdate : record {
    canister_id : principal;
    max_memory_size_bytes : nat64;
  };
  NextArchiveCanisterConfigUpdate : NextArchiveCanisterConfig;
  BlocksPush;
  CachedBlockQuery;
  ArchivedCanisterMaintainersUpdate : record {
    maintainers : opt vec principal;
    canister_id : principal;
  };
  WasmModuleUpdate : blob;
  BlockChainQuery;
};
type BlockChainView = record {
  current_archiving : opt CurrentArchiving;
  latest_block_hash : blob;
  archive_config : NextArchiveCanisterConfig;
  next_block_index : nat64;
  archived : vec ArchivedBlocks;
};
type BurnFee = record { fee : nat; fee_to : Account };
type BusinessError = variant {
  InvalidTokenPair : record { principal; principal };
  TokenBlockChainLocked;
  TransferError : TransferError;
  NotSupportedToken : principal;
  Swap : text;
  TokenPairAmmNotExist : TokenPairAmm;
  TokenAccountsLocked : vec TokenAccount;
  SystemError : text;
  MemoTooLong;
  InsufficientBalance : record { token : principal; balance : nat };
  TokenPairAmmExist : TokenPairAmm;
  RequestTraceLocked : text;
  InvalidCreated : record { created : nat64; system : nat64 };
  InvalidAmm : text;
  InvalidTransferFee : record { fee : nat; token : principal };
  SwapBlockChainLocked;
  TokenBlockChainError : text;
  TransferFromError : TransferFromError;
  TokenAccountsUnlocked : vec TokenAccount;
  NotOwner : principal;
  BadTransferFee : record { expected_fee : nat };
  SwapBlockChainError : text;
  CallCanisterError : text;
  Liquidity : text;
  Expired : record { deadline : nat64; system : nat64 };
};
type BusinessLocks = record {
  token : opt bool;
  swap : opt bool;
  balances : opt vec TokenAccount;
};
type CurrentArchiving = record {
  canister_id : principal;
  length : nat64;
  max_length : nat64;
  block_height_offset : nat64;
};
type DepositToken = record {
  to : Account;
  token : principal;
  from : Account;
  amount : nat;
};
type FeeTo = record { token_fee_to : opt Account; swap_fee_to : opt Account };
type InitArg = record { maintainers : opt vec principal; schedule : opt nat };
type InitArgs = variant { V0 : InitArg; V1 : InitArg };
type InnerLP = record {
  fee : nat;
  decimals : nat8;
  dummy_canister_id : principal;
  minimum_liquidity : nat;
  total_supply : nat;
};
type MaintainArchives = record {
  recharged : vec record { principal; nat };
  checking_interval_ns : nat64;
  recharge_cycles : nat64;
  min_cycles_threshold : nat64;
  last_checked_timestamp : nat64;
};
type MaintainArchivesConfig = record {
  checking_interval_ns : nat64;
  recharge_cycles : nat64;
  min_cycles_threshold : nat64;
};
type MarketMakerView = variant { swap_v2 : SwapV2MarketMakerView };
type NextArchiveCanisterConfig = record {
  maintainers : opt vec principal;
  max_memory_size_bytes : opt nat64;
  max_length : nat64;
};
type OuterLP = record {
  fee : nat;
  decimals : nat8;
  token_canister_id : principal;
  minimum_liquidity : nat;
  total_supply : nat;
};
type PairCreate = record { pa : TokenPairAmm; creator : principal };
type PairCreateArgWithMeta = record {
  arg : TokenPairAmm;
  now : nat64;
  created : opt nat64;
  memo : opt blob;
  caller : principal;
};
type PairCumulativePrice = record {
  pa : TokenPairAmm;
  price_cumulative_exponent : nat8;
  price0_cumulative : nat;
  block_timestamp : nat64;
  price1_cumulative : nat;
};
type PairLiquidityAddArgWithMeta = record {
  arg : TokenPairLiquidityAddArg;
  now : nat64;
  created : opt nat64;
  memo : opt blob;
  caller : principal;
};
type PairLiquidityRemoveArgWithMeta = record {
  arg : TokenPairLiquidityRemoveArg;
  now : nat64;
  created : opt nat64;
  memo : opt blob;
  caller : principal;
};
type PairOperation = variant {
  swap : PairSwapToken;
  swap_v2 : SwapV2Operation;
  create : PairCreate;
};
type PairSwapByLoanArgWithMeta = record {
  arg : TokenPairSwapByLoanArg;
  now : nat64;
  created : opt nat64;
  memo : opt blob;
  caller : principal;
};
type PairSwapExactTokensForTokensArgWithMeta = record {
  arg : TokenPairSwapExactTokensForTokensArg;
  now : nat64;
  created : opt nat64;
  memo : opt blob;
  caller : principal;
};
type PairSwapToken = record {
  to : Account;
  amm : Amm;
  token_a : principal;
  token_b : principal;
  from : Account;
  amount_a : nat;
  amount_b : nat;
};
type PairSwapTokensForExactTokensArgWithMeta = record {
  arg : TokenPairSwapTokensForExactTokensArg;
  now : nat64;
  created : opt nat64;
  memo : opt blob;
  caller : principal;
};
type PauseReason = record { timestamp_nanos : int; message : text };
type Permission = variant { Permitted : text; Forbidden : text };
type PermissionUpdatedArg = variant {
  UpdateRolePermission : record { text; opt vec text };
  UpdateUserPermission : record { principal; opt vec text };
  UpdateUserRole : record { principal; opt vec text };
};
type PoolLp = variant { outer : OuterLP; inner : InnerLP };
type PushBlocks = record { block_height_start : nat64; length : nat64 };
type QuerySwapBlockResult = variant { archive : principal; block : SwapBlock };
type QueryTokenBlockResult = variant {
  archive : principal;
  block : TokenBlock;
};
type RequestArgs = variant {
  token_block_push;
  token_deposit : TokenDepositArgWithMeta;
  pair_create : PairCreateArgWithMeta;
  pair_swap_exact_tokens_for_tokens : PairSwapExactTokensForTokensArgWithMeta;
  pair_liquidity_add : PairLiquidityAddArgWithMeta;
  token_transfer : TokenTransferArgWithMeta;
  pair_swap_by_loan : PairSwapByLoanArgWithMeta;
  blocks_maintaining;
  pair_liquidity_remove : PairLiquidityRemoveArgWithMeta;
  pair_swap_tokens_for_exact_tokens : PairSwapTokensForExactTokensArgWithMeta;
  swap_block_push;
  token_withdraw : TokenDepositArgWithMeta;
};
type RequestTrace = record {
  args : RequestArgs;
  done : opt RequestTraceDone;
  traces : vec record { nat64; text };
  locks : BusinessLocks;
  index : nat64;
};
type RequestTraceDone = record { result : RequestTraceResult; done : nat64 };
type RequestTraceResult = variant { ok : text; err : text };
type SwapBlock = record {
  transaction : SwapTransaction;
  timestamp : nat64;
  parent_hash : blob;
};
type SwapBlockResponse = variant {
  CachedBlock : opt record { nat64; nat64 };
  BlockChain : BlockChainView;
  ArchivedCanisterMaintainers;
  CurrentArchivingMaxLength : opt CurrentArchiving;
  NextArchiveCanisterConfig : NextArchiveCanisterConfig;
  Block : QuerySwapBlockResult;
  WasmModule : opt blob;
  BlocksPush : opt PushBlocks;
  ArchivedCanisterMaxMemorySizeBytes;
};
type SwapBlockResult = variant { Ok : SwapBlockResponse; Err : BusinessError };
type SwapOperation = variant { pair : PairOperation };
type SwapTokenPair = record {
  amm : text;
  token : record { principal; principal };
};
type SwapTransaction = record {
  created : opt nat64;
  memo : opt blob;
  operation : SwapOperation;
};
type SwapV2BurnToken = record {
  pa : TokenPairAmm;
  to : Account;
  fee : opt BurnFee;
  token : principal;
  from : Account;
  amount0 : nat;
  amount1 : nat;
  token0 : principal;
  token1 : principal;
  amount : nat;
};
type SwapV2MarketMakerView = record {
  lp : PoolLp;
  price_cumulative_exponent : nat8;
  block_timestamp_last : nat64;
  reserve0 : text;
  reserve1 : text;
  subaccount : text;
  price1_cumulative_last : text;
  token0 : text;
  token1 : text;
  fee_rate : text;
  k_last : text;
  protocol_fee : opt text;
  price0_cumulative_last : text;
};
type SwapV2MintFeeToken = record {
  pa : TokenPairAmm;
  to : Account;
  token : principal;
  amount : nat;
};
type SwapV2MintToken = record {
  pa : TokenPairAmm;
  to : Account;
  token : principal;
  from : Account;
  amount0 : nat;
  amount1 : nat;
  token0 : principal;
  token1 : principal;
  amount : nat;
};
type SwapV2Operation = variant {
  burn : SwapV2BurnToken;
  mint : SwapV2MintToken;
  mint_fee : SwapV2MintFeeToken;
  cumulative_price : PairCumulativePrice;
  transfer : SwapV2TransferToken;
};
type SwapV2TransferToken = record {
  pa : TokenPairAmm;
  to : Account;
  fee : opt BurnFee;
  from : Account;
  amount : nat;
};
type TokenAccount = record { token : principal; account : Account };
type TokenBlock = record {
  transaction : TokenTransaction;
  timestamp : nat64;
  parent_hash : blob;
};
type TokenBlockResponse = variant {
  CachedBlock : opt record { nat64; nat64 };
  BlockChain : BlockChainView;
  ArchivedCanisterMaintainers;
  CurrentArchivingMaxLength : opt CurrentArchiving;
  NextArchiveCanisterConfig : NextArchiveCanisterConfig;
  Block : QueryTokenBlockResult;
  WasmModule : opt blob;
  BlocksPush : opt PushBlocks;
  ArchivedCanisterMaxMemorySizeBytes;
};
type TokenBlockResult = variant {
  Ok : TokenBlockResponse;
  Err : BusinessError;
};
type TokenChangedResult = variant { Ok : nat; Err : BusinessError };
type TokenDepositArgWithMeta = record {
  arg : DepositToken;
  now : nat64;
  created : opt nat64;
  memo : opt blob;
  caller : principal;
};
type TokenDepositArgs = record {
  to : Account;
  fee : opt nat;
  created : opt nat64;
  token : principal;
  from : Account;
  memo : opt blob;
  deposit_amount_without_fee : nat;
};
type TokenInfo = record {
  fee : nat;
  decimals : nat8;
  name : text;
  canister_id : principal;
  is_lp_token : bool;
  symbol : text;
};
type TokenOperation = variant {
  withdraw : DepositToken;
  deposit : DepositToken;
  transfer : TransferToken;
};
type TokenPair = record { token0 : principal; token1 : principal };
type TokenPairAmm = record { amm : Amm; pair : TokenPair };
type TokenPairCreateArgs = record {
  created : opt nat64;
  memo : opt blob;
  pool : TokenPairPool;
};
type TokenPairCreateResult = variant {
  Ok : MarketMakerView;
  Err : BusinessError;
};
type TokenPairLiquidityAddArg = record {
  pa : TokenPairAmm;
  to : Account;
  amount_a_min : nat;
  token_a : principal;
  token_b : principal;
  self_canister : principal;
  from : Account;
  amount_b_desired : nat;
  amount_a_desired : nat;
  amount_b_min : nat;
};
type TokenPairLiquidityAddArgs = record {
  to : Account;
  created : opt nat64;
  from : Account;
  memo : opt blob;
  deadline : opt nat64;
  amount_desired : record { nat; nat };
  amount_min : record { nat; nat };
  swap_pair : SwapTokenPair;
};
type TokenPairLiquidityAddResult = variant {
  Ok : TokenPairLiquidityAddSuccess;
  Err : BusinessError;
};
type TokenPairLiquidityAddSuccess = record {
  liquidity : nat;
  amount : record { nat; nat };
};
type TokenPairLiquidityRemoveArg = record {
  pa : TokenPairAmm;
  to : Account;
  amount_a_min : nat;
  token_a : principal;
  token_b : principal;
  self_canister : principal;
  liquidity_without_fee : nat;
  from : Account;
  amount_b_min : nat;
};
type TokenPairLiquidityRemoveArgs = record {
  to : Account;
  created : opt nat64;
  liquidity_without_fee : nat;
  from : Account;
  memo : opt blob;
  deadline : opt nat64;
  amount_min : record { nat; nat };
  swap_pair : SwapTokenPair;
};
type TokenPairLiquidityRemoveResult = variant {
  Ok : TokenPairLiquidityRemoveSuccess;
  Err : BusinessError;
};
type TokenPairLiquidityRemoveSuccess = record { amount : record { nat; nat } };
type TokenPairPool = record {
  amm : text;
  token0 : principal;
  token1 : principal;
};
type TokenPairSwapByLoanArg = record {
  to : Account;
  pas : vec TokenPairAmm;
  self_canister : principal;
  from : Account;
  loan : nat;
  path : vec SwapTokenPair;
};
type TokenPairSwapByLoanArgs = record {
  to : Account;
  created : opt nat64;
  from : Account;
  loan : nat;
  memo : opt blob;
  path : vec SwapTokenPair;
  deadline : opt nat64;
};
type TokenPairSwapExactTokensForTokensArg = record {
  to : Account;
  pas : vec TokenPairAmm;
  self_canister : principal;
  amount_out_min : nat;
  from : Account;
  path : vec SwapTokenPair;
  amount_in : nat;
};
type TokenPairSwapExactTokensForTokensArgs = record {
  to : Account;
  created : opt nat64;
  amount_out_min : nat;
  from : Account;
  memo : opt blob;
  path : vec SwapTokenPair;
  deadline : opt nat64;
  amount_in : nat;
};
type TokenPairSwapTokensForExactTokensArg = record {
  to : Account;
  pas : vec TokenPairAmm;
  self_canister : principal;
  from : Account;
  path : vec SwapTokenPair;
  amount_out : nat;
  amount_in_max : nat;
};
type TokenPairSwapTokensForExactTokensArgs = record {
  to : Account;
  created : opt nat64;
  from : Account;
  memo : opt blob;
  path : vec SwapTokenPair;
  deadline : opt nat64;
  amount_out : nat;
  amount_in_max : nat;
};
type TokenPairSwapTokensResult = variant {
  Ok : TokenPairSwapTokensSuccess;
  Err : BusinessError;
};
type TokenPairSwapTokensSuccess = record { amounts : vec nat };
type TokenPairSwapWithDepositAndWithdrawArgs = record {
  to : Account;
  created : opt nat64;
  amount_out_min : nat;
  from : Account;
  memo : opt blob;
  path : vec SwapTokenPair;
  deadline : opt nat64;
  deposit_amount_without_fee : nat;
  withdraw_fee : opt nat;
  deposit_fee : opt nat;
};
type TokenTransaction = record {
  created : opt nat64;
  memo : opt blob;
  operation : TokenOperation;
};
type TokenTransferArgWithMeta = record {
  arg : TransferToken;
  now : nat64;
  created : opt nat64;
  memo : opt blob;
  caller : principal;
};
type TokenTransferArgs = record {
  to : Account;
  fee : opt nat;
  created : opt nat64;
  token : principal;
  from : Account;
  memo : opt blob;
  transfer_amount_without_fee : nat;
};
type TokenWithdrawArgs = record {
  to : Account;
  fee : opt nat;
  created : opt nat64;
  token : principal;
  from : Account;
  memo : opt blob;
  withdraw_amount_without_fee : nat;
};
type TransferError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
type TransferFromError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  InsufficientAllowance : record { allowance : nat };
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
type TransferToken = record {
  to : Account;
  fee : opt BurnFee;
  token : principal;
  from : Account;
  amount : nat;
};
service : (opt InitArgs) -> {
  __get_candid_interface_tmp_hack : () -> (text) query;
  block_swap_get : (nat64) -> (QuerySwapBlockResult) query;
  block_token_get : (nat64) -> (QueryTokenBlockResult) query;
  config_fee_to_query : () -> (FeeTo);
  config_fee_to_replace : (FeeTo) -> (FeeTo);
  config_maintain_archives_query : () -> (MaintainArchives) query;
  config_maintain_archives_set : (MaintainArchivesConfig) -> ();
  config_swap_block_chain_query : (BlockChainArgs) -> (SwapBlockResult) query;
  config_swap_block_chain_update : (BlockChainArgs) -> (SwapBlockResult);
  config_token_block_chain_query : (BlockChainArgs) -> (TokenBlockResult) query;
  config_token_block_chain_update : (BlockChainArgs) -> (TokenBlockResult);
  pair_create : (TokenPairCreateArgs) -> (TokenPairCreateResult);
  pair_liquidity_add : (TokenPairLiquidityAddArgs, opt nat8) -> (
      TokenPairLiquidityAddResult,
    );
  pair_liquidity_remove : (TokenPairLiquidityRemoveArgs, opt nat8) -> (
      TokenPairLiquidityRemoveResult,
    );
  pair_query : (TokenPairPool) -> (opt MarketMakerView) query;
  pair_swap_by_loan : (TokenPairSwapByLoanArgs, opt nat8) -> (
      TokenPairSwapTokensResult,
    );
  pair_swap_exact_tokens_for_tokens : (
      TokenPairSwapExactTokensForTokensArgs,
      opt nat8,
    ) -> (TokenPairSwapTokensResult);
  pair_swap_tokens_for_exact_tokens : (
      TokenPairSwapTokensForExactTokensArgs,
      opt nat8,
    ) -> (TokenPairSwapTokensResult);
  pair_swap_with_deposit_and_withdraw : (
      TokenPairSwapWithDepositAndWithdrawArgs,
    ) -> (
      TokenChangedResult,
      opt TokenPairSwapTokensResult,
      opt TokenChangedResult,
    );
  pairs_query : () -> (vec record { TokenPairPool; MarketMakerView }) query;
  pause_query : () -> (bool) query;
  pause_query_reason : () -> (opt PauseReason) query;
  pause_replace : (opt text) -> ();
  permission_all : () -> (vec Permission) query;
  permission_assigned_by_user : (principal) -> (opt vec Permission) query;
  permission_assigned_query : () -> (opt vec Permission) query;
  permission_find_by_user : (principal) -> (vec text) query;
  permission_query : () -> (vec text) query;
  permission_roles_all : () -> (vec record { text; vec Permission }) query;
  permission_roles_by_user : (principal) -> (opt vec text) query;
  permission_roles_query : () -> (opt vec text) query;
  permission_update : (vec PermissionUpdatedArg) -> ();
  request_trace_get : (nat64) -> (opt RequestTrace);
  request_trace_index_get : () -> (nat64, nat64);
  request_trace_remove : (nat64) -> (opt RequestTrace);
  schedule_find : () -> (opt nat64) query;
  schedule_replace : (opt nat64) -> ();
  schedule_trigger : () -> ();
  test_config_swap_current_archiving_replace : (CurrentArchiving) -> (
      opt CurrentArchiving,
    );
  test_config_token_current_archiving_replace : (CurrentArchiving) -> (
      opt CurrentArchiving,
    );
  test_set_controller : (principal) -> ();
  test_withdraw_all_tokens : (vec principal) -> (vec text);
  token_balance : (principal, opt blob) -> (nat) query;
  token_balance_by : (principal, Account) -> (nat) query;
  token_balance_of : (principal, Account) -> (nat) query;
  token_deposit : (TokenDepositArgs, opt nat8) -> (TokenChangedResult);
  token_query : (principal) -> (opt TokenInfo) query;
  token_transfer : (TokenTransferArgs, opt nat8) -> (TokenChangedResult);
  token_withdraw : (TokenWithdrawArgs, opt nat8) -> (TokenChangedResult);
  tokens_balance : (opt blob) -> (vec record { principal; nat }) query;
  tokens_balance_by : (Account) -> (vec record { principal; nat }) query;
  tokens_balance_of : (Account) -> (vec record { principal; nat }) query;
  tokens_query : () -> (vec TokenInfo) query;
  updated : () -> (nat64) query;
  version : () -> (nat32) query;
  wallet_balance : () -> (nat) query;
  wallet_receive : () -> (nat);
}