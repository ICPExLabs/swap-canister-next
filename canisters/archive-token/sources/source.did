type Account = record { owner : principal; subaccount : opt blob };
type CustomHttpRequest = record {
  url : text;
  method : text;
  body : blob;
  headers : vec record { text; text };
};
type CustomHttpResponse = record {
  body : blob;
  headers : vec record { text; text };
  upgrade : opt bool;
  streaming_strategy : opt StreamingStrategy;
  status_code : nat16;
};
type CustomMetrics = record {
  stable_memory_pages : nat64;
  stable_memory_bytes : nat64;
  heap_memory_bytes : nat64;
  last_upgrade_time_seconds : nat64;
  max_memory_size_bytes : nat64;
  blocks : nat64;
  blocks_bytes : nat64;
  block_height_offset : nat64;
};
type DepositToken = record {
  to : Account;
  token : principal;
  from : Account;
  amount : nat;
};
type GetBlocksArgs = record { start : nat64; length : nat64 };
type GetBlocksError = variant {
  BadFirstBlockIndex : record {
    requested_index : nat64;
    first_valid_index : nat64;
  };
  Other : record { error_message : text; error_code : nat64 };
};
type GetEncodedBlocksResult = variant { Ok : vec blob; Err : GetBlocksError };
type GetTokenBlocksResult = variant {
  Ok : TokenBlockRange;
  Err : GetBlocksError;
};
type InitArgV1 = record {
  maintainers : opt vec principal;
  block_offset : opt record { nat64; blob };
  core_canister_id : opt principal;
  max_memory_size_bytes : opt nat64;
};
type InitArgs = variant { V0 : record {}; V1 : InitArgV1 };
type StreamingCallbackHttpResponse = record {
  token : opt StreamingCallbackToken;
  body : blob;
};
type StreamingCallbackToken = record {
  token : vec record { text; text };
  path : text;
};
type StreamingStrategy = variant {
  Callback : record {
    token : StreamingCallbackToken;
    callback : func (StreamingCallbackToken) -> (
        StreamingCallbackHttpResponse,
      ) query;
  };
};
type TokenBlock = record {
  transaction : TokenTransaction;
  timestamp : nat64;
  parent_hash : blob;
};
type TokenBlockRange = record { blocks : vec TokenBlock };
type TokenOperation = variant {
  withdraw : DepositToken;
  deposit : DepositToken;
  transfer : TransferToken;
};
type TokenTransaction = record {
  created : opt nat64;
  memo : opt blob;
  operation : TokenOperation;
};
type TransferFee = record { fee : nat; fee_to : Account };
type TransferToken = record {
  to : Account;
  fee : opt TransferFee;
  token : principal;
  from : Account;
  amount : nat;
};
service : (opt InitArgs) -> {
  __get_candid_interface_tmp_hack : () -> (text) query;
  append_blocks : (vec blob) -> ();
  get_block_pb : (blob) -> (blob) query;
  get_blocks : (GetBlocksArgs) -> (GetTokenBlocksResult) query;
  get_blocks_pb : (blob) -> (blob) query;
  get_encoded_blocks : (GetBlocksArgs) -> (GetEncodedBlocksResult) query;
  http_request : (CustomHttpRequest) -> (CustomHttpResponse) query;
  iter_blocks_pb : (blob) -> (blob) query;
  query_latest_block_index : () -> (opt nat64) query;
  query_metrics : () -> (CustomMetrics) query;
  remaining_capacity : () -> (nat64) query;
  set_maintainers : (opt vec principal) -> ();
  set_max_memory_size_bytes : (nat64) -> ();
  version : () -> (nat32) query;
  wallet_balance : () -> (nat) query;
  wallet_receive : () -> (nat);
}